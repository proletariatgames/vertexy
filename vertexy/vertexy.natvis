<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="Vertexy::ClauseConstraint">
      <DisplayString>{{ID={m_id} Num={m_numLiterals}}</DisplayString>
      <Expand>
        <Item Name="ID">m_id</Item>
        <Item Name="bPermanent">m_extendedInfo.mPair.mFirst != 0 ? m_extendedInfo.mPair.mFirst->isPermanent : true</Item>
        <Item Name="bLearned">m_extendedInfo.mPair.mFirst != 0 ? m_extendedInfo.mPair.mFirst->isLearned : false</Item>
        <Item Name="ExtendedInfo">m_extendedInfo.mPair.mFirst</Item>
        <Item Name="GraphRelationInfo">m_graphRelationInfo.mPair.mFirst</Item>
        <ArrayItems>
          <Size>m_numLiterals</Size>
          <ValuePointer>&amp;m_literals[0]</ValuePointer>
        </ArrayItems>
      </Expand>
	</Type>
    <Type Name="Vertexy::TValueBitset&lt;*&gt;">
        <DisplayString Condition="m_numBits == 0">Empty</DisplayString>
        <DisplayString Condition="m_numBits &lt; 0">Invalid</DisplayString>
        <Expand>
            <IndexListItems Condition="m_numBits &gt; 0">
                <Size>m_numBits</Size>
                <ValueNode Condition="(reinterpret_cast&lt;uint64_t*&gt;(m_dataPtr)[$i/64]&gt;&gt;($i%64) &amp; 1) != 0">1</ValueNode>
                <ValueNode Condition="(reinterpret_cast&lt;uint64_t*&gt;(m_dataPtr)[$i/64]&gt;&gt;($i%64) &amp; 1) == 0">0</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <Type Name="Vertexy::TFastLookupSet&lt;*&gt;">
        <Expand>
            <Item Name="[size]">m_elements.mpEnd - m_elements.mpBegin</Item>
            <Item Name="[capacity]">m_elements.mCapacityAllocator.mFirst - m_elements.mpBegin</Item>
            <ArrayItems>
                <Size>m_elements.mpEnd - m_elements.mpBegin</Size>
                <ValuePointer>m_elements.mpBegin</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="Vertexy::AssignmentStack::Modification">
        <DisplayString>Modify:{*(Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_variableNames.mpBegin+variable.m_value)}</DisplayString>
        <Expand>
            <Item Name="ValueBeforeModification">previousValue</Item>
            <Item Name="ModifiedBy">constraint</Item>
            <Item Name="PreviousModification" Condition="previousVariableAssignment &gt;= 0">Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_assignmentStack.m_stack.mpBegin+previousVariableAssignment</Item>
        </Expand>
    </Type>
    <Type Name="Vertexy::SolverVariableDatabase::VariableInfo">
        <Expand>
            <Item Name="PotentialValues">potentialValues</Item>
            <Item Name="LatestModificationTime">latestModification</Item>
            <Item Name="LatestModification" Condition="latestModification &gt;= 0">Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_assignmentStack.m_stack.mpBegin+latestModification</Item>
        </Expand>
    </Type>
    <Type Name="Vertexy::VarID">
        <DisplayString Condition="m_value == 0">Invalid</DisplayString>
        <DisplayString Condition="m_value != 0">{Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_variableNames.mpBegin+m_value}</DisplayString>
        <Expand>
            <Item Name="ID">m_value</Item>
            <Item Name="LastModified">(Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_variableInfo.mpBegin+m_value)->latestModification</Item>
            <Item Name="Info">*(Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_variableInfo.mpBegin+m_value)</Item>
        </Expand>
    </Type>
    <Type Name="Vertexy::Literal">
        <DisplayString Condition="variable.m_value == 0">Invalid</DisplayString>
        <DisplayString Condition="variable.m_value != 0">{*(Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_variableNames.mpBegin+variable.m_value)}={values}</DisplayString>
        <Expand>
            <Item Name="Variable">variable</Item>
            <Item Name="Values">values</Item>
        </Expand>
    </Type>
    <!-- AtomID -->
    <Type Name="Vertexy::AtomID">
        <DisplayString Condition="value == 0">Invalid</DisplayString>
        <DisplayString Condition="value != 0">{Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[value].mPair.mFirst->name}</DisplayString>
        <Expand>
            <Item Name="Value">Vertexy::ConstraintSolver::s_currentSolver->m_variableDB.m_variableInfo[Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[value].mPair.mFirst->equivalence.variable.m_value].potentialValues</Item>
            <Item Name="AtomInfo">Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[value].mPair.mFirst</Item>
            <Item Name="AtomData">Vertexy::ConstraintSolver::s_currentSolver->m_unfoundedSetAnalyzer.mPair.mFirst->m_atomData[value]</Item>
        </Expand>
    </Type>
    <!-- AtomLiteral -->
    <Type Name="Vertexy::AtomLiteral">
        <DisplayString Condition="value == 0">Invalid</DisplayString>
        <DisplayString Condition="value &lt; 0">{Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[-value].mPair.mFirst->name}=0</DisplayString>
        <DisplayString Condition="value &gt; 0">{Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[value].mPair.mFirst->name}=1</DisplayString>
        <Expand>
            <Item Name="AtomInfo" Condition="value &gt; 0">Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[value].mPair.mFirst</Item>
            <Item Name="AtomInfo" Condition="value &lt; 0">Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[-value].mPair.mFirst</Item>
            <Item Name="AtomData" Condition="value &gt; 0 &amp;&amp; Vertexy::ConstraintSolver::s_currentSolver->m_unfoundedSetAnalyzer.mPair.mFirst">Vertexy::ConstraintSolver::s_currentSolver->m_unfoundedSetAnalyzer.mPair.mFirst->m_atomData[value]</Item>
            <Item Name="AtomData" Condition="value &lt; 0 &amp;&amp; Vertexy::ConstraintSolver::s_currentSolver->m_unfoundedSetAnalyzer.mPair.mFirst">Vertexy::ConstraintSolver::s_currentSolver->m_unfoundedSetAnalyzer.mPair.mFirst->m_atomData[-value]</Item>
            <Item Name="Literal">Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_atoms[value].mPair.mFirst->equivalence</Item>
        </Expand>
    </Type>
    <!-- AtomData -->
    <Type Name="Vertexy::UnfoundedSetAnalyzer::AtomData">
        <Expand>
            <Item Name="SourceIsValid">sourceIsValid</Item>
            <Item Name="Source ID">source</Item>
            <Item Name="Source Info" Condition="source &gt;= 0">Vertexy::ConstraintSolver::s_currentSolver->m_ruleDB->m_bodies[source]</Item>
            <Item Name="Source Unfounded Data" Condition="source &gt;= 0">Vertexy::ConstraintSolver::s_currentSolver->m_unfoundedSetAnalyzer.mPair.mFirst->m_bodyData[source]</Item>
        </Expand>
    </Type>
    <!-- ProgramSymbol -->
    <Type Name="Vertexy::ProgramSymbol">
        <DisplayString Condition="(m_packed >> 56) == 0">{m_packed}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 1">{-(m_packed &amp; 0x00FFFFFFFFFFFFFEULL)}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 2">{(wchar_t*)(m_packed &amp; 0x00FFFFFFFFFFFFFEULL)}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 3 &amp;&amp; ((m_packed&amp;1)==1)">{((Vertexy::ConstantFormula*)(m_packed &amp; 0x00FFFFFFFFFFFFFEULL))->name}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 3 &amp;&amp; ((m_packed&amp;1)==0)">!!FALSE!! {((Vertexy::ConstantFormula*)(m_packed &amp; 0x00FFFFFFFFFFFFFEULL))->name}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 4 &amp;&amp; ((m_packed&amp;1)==1)">External:{((Vertexy::ConstantFormula*)(m_packed &amp; 0x00FFFFFFFFFFFFFEULL))->name}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 4 &amp;&amp; ((m_packed&amp;1)==0)">!!FALSE!! External:{((Vertexy::ConstantFormula*)(m_packed &amp; 0x00FFFFFFFFFFFFFEULL))->name}</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 5">Abstract</DisplayString>
        <DisplayString Condition="(m_packed >> 56) == 6">Invalid</DisplayString>
        <Expand>
            <Item Name="Signature" Condition="(m_packed >> 56)==3 || (m_packed >> 56)==4">(Vertexy::ConstantFormula*)(m_packed &amp; 0x00FFFFFFFFFFFFFEULL)</Item>
            <Item Name="Provider" Condition="(m_packed >> 56)==4">(Vertexy::IExternalFormulaProvider*)m_smartPtrBytes[0]</Item>
            <Item Name="Relation" Condition="(m_packed >> 56)==5">(Vertexy::IGraphRelation&lt;int&gt;*)m_smartPtrBytes[0]</Item>
        </Expand>
    </Type>
</AutoVisualizer>
